from django import forms
from django.conf import settings
from django.core.mail import send_mail
from django.utils import timezone
from html2text import html2text

from .models import EmailTemplate, EmailFrame


class EmailFrameUpdateForm(forms.ModelForm):
    class Meta:
        model = EmailFrame
        fields = ('text_html', 'text_plain')

    def save(self, commit=True):
        template = super().save(commit=False)
        template.updated_at = timezone.now()
        if commit:
            template.save()
        return template


class EmailFrameTestForm(forms.Form):
    text_html = forms.CharField(widget=forms.Textarea())
    text_plain = forms.CharField(widget=forms.Textarea())

    def send_message(self, user, conference):
        body_html = f"<p>Dear {user.profile.get_full_name()},</p>" \
            f"<p>this is a test generated by the registration system.</p>"
        body_plain = html2text(body_html)
        subject = 'Template test'

        html = EmailFrame.render(
            self.cleaned_data['text_html'], conference, subject, body_html
        )
        plain = EmailFrame.render(
            self.cleaned_data['text_plain'], conference, subject, body_plain
        )

        send_mail(
            subject=f'[{conference.short_name}] {subject}',
            message=plain,
            from_email=settings.DEFAULT_FROM_EMAIL,
            recipient_list=[user.email],
            html_message=html,
        )


class EmailTemplateForm(forms.ModelForm):
    class Meta:
        model = EmailTemplate
        fields = ('body', 'subject')


    # This field is not related to EmailTemplate, but used to store URL
    # of the page from which we came to the page containing the form.
    next = forms.CharField(widget=forms.TextInput, required=False)

    def __init__(self, *args, conference=None, msg_type=None, created_by=None,
                 **kwargs):
        super().__init__(*args, **kwargs)
        self.conference = conference
        self.msg_type = msg_type
        self.created_by = created_by

    def save(self, commit=True):
        template = super().save(commit=False)
        if self.msg_type:
            template.msg_type = self.msg_type
        if commit:
            if self.conference:
                template.conference = self.conference
            if self.created_by:
                template.created_by = self.created_by
            template.save()
        return template
